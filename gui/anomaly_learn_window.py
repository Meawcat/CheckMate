# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui/anomaly_learn_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, subprocess
import threading
from PyQt5.QtWidgets import QMessageBox

class Ui_AnomalyLearnWindow(object):
    def setupUi(self, AnomalyLearnWindow):
        script_path = os.path.abspath(__file__)
        script_dir = os.path.dirname(script_path)
        os.chdir(script_dir)

        AnomalyLearnWindow.setObjectName("AnomalyLearnWindow")
        AnomalyLearnWindow.resize(625, 443)
        AnomalyLearnWindow.setStyleSheet("font: 9pt \"맑은 고딕\";\n"
"background-color: #fff;\n"
"")
        self.centralwidget = QtWidgets.QWidget(AnomalyLearnWindow)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.centralwidget.setFont(font)
        self.centralwidget.setStyleSheet("QPushButton:hover {\n"
"    color: #fff;\n"
"    font: bold;\n"
"}\n"
"QPushButton {\n"
"    border: 4px solid#a6aaaf;\n"
"    border-radius: 5px;\n"
"    padding: 1px 5px;\n"
"    background-color: #a6aaaf;\n"
"    font: bold;\n"
"}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(6, 6, 6, 6)
        self.gridLayout.setSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        self.model_save = QtWidgets.QLabel(self.centralwidget)
        self.model_save.setAlignment(QtCore.Qt.AlignCenter)
        self.model_save.setObjectName("model_save")
        self.gridLayout.addWidget(self.model_save, 2, 0, 1, 1)
        self.item_name = QtWidgets.QLabel(self.centralwidget)
        self.item_name.setObjectName("item_name")
        self.gridLayout.addWidget(self.item_name, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.load_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.load_button.setFont(font)
        self.load_button.setStyleSheet("QPushButton:hover {\n"
"    color: #fff;\n"
"}\n"
"QPushButton {\n"
"    border: 4px solid#a6aaaf;\n"
"    border-radius: 5px;\n"
"    padding: 1px 5px;\n"
"    background-color: #a6aaaf;\n"
"}")
        self.load_button.setObjectName("load_button")
        self.gridLayout.addWidget(self.load_button, 2, 2, 1, 1)
        self.model_save_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.model_save_edit.setStyleSheet("border: 2px solid#a6aaaf;\n"
"border-radius: 5px;\n"
"padding: 1px 5px;\n"
"\n"
"")
        self.model_save_edit.setObjectName("model_save_edit")
        self.gridLayout.addWidget(self.model_save_edit, 2, 1, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.comboBox.setStyleSheet("border: 2px solid #a6aaaf;\n"
"border-radius: 5px;\n"
"padding: 1px 5px;\n"
"\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.gridLayout.addWidget(self.comboBox, 0, 1, 1, 1)
        self.model_dir = QtWidgets.QLabel(self.centralwidget)
        self.model_dir.setAlignment(QtCore.Qt.AlignCenter)
        self.model_dir.setObjectName("model_dir")
        self.gridLayout.addWidget(self.model_dir, 1, 0, 1, 1)
        self.model_dir_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.model_dir_edit.setStyleSheet("border: 2px solid#a6aaaf;\n"
"border-radius: 5px;\n"
"padding: 1px 5px;\n"
"\n"
"")
        self.model_dir_edit.setObjectName("model_dir_edit")
        self.gridLayout.addWidget(self.model_dir_edit, 1, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.train_button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.train_button.setFont(font)
        self.train_button.setStyleSheet("QPushButton:hover {\n"
"    color: #fff;\n"
"}\n"
"QPushButton {\n"
"    border: 4px solid#a6aaaf;\n"
"    border-radius: 5px;\n"
"    padding: 1px 5px;\n"
"    background-color: #a6aaaf;\n"
"}")
        self.train_button.setObjectName("train_button")
        self.gridLayout_2.addWidget(self.train_button, 2, 0, 1, 1)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout_2.addWidget(self.progressBar, 3, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 298, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem, 1, 0, 1, 1)
        AnomalyLearnWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(AnomalyLearnWindow)
        QtCore.QMetaObject.connectSlotsByName(AnomalyLearnWindow)

        self.populate_directory_combo(self.comboBox)
        self.set_edit()
        self.load_button.clicked.connect(self.open_directory_dialog)
        self.comboBox.currentIndexChanged.connect(self.set_edit)
        self.train_button.clicked.connect(self.start_training)
        self.model_dir_edit.textChanged.connect(self.model_dir_changed)

    def retranslateUi(self, AnomalyLearnWindow):
        _translate = QtCore.QCoreApplication.translate
        AnomalyLearnWindow.setWindowTitle(_translate("AnomalyLearnWindow", "MainWindow"))
        self.model_save.setText(_translate("AnomalyLearnWindow", "학습 모델 저장 위치"))
        self.item_name.setText(_translate("AnomalyLearnWindow", "물품 이름"))
        self.load_button.setText(_translate("AnomalyLearnWindow", "불러오기"))
        self.model_dir.setText(_translate("AnomalyLearnWindow", "학습 모델 폴더 이름"))
        self.train_button.setText(_translate("AnomalyLearnWindow", "학습 시작"))

    def model_dir_changed(self):
            combo_text = self.comboBox.currentText()
            model_dir_text = self.model_dir_edit.text()
            new_path = os.path.join("../EfficientAD-main/output", model_dir_text)
            self.model_save_edit.setText(new_path)

    def start_training(self):
        selected_item = self.comboBox.currentText()
        selected_model_dir = os.path.join("../EfficientAD-main/output")
        dest = os.path.join(selected_model_dir, selected_item)
        i = 1
        if os.path.exists(dest):
            choice = QMessageBox.question(self, "파일 덮어쓰기",
                                          f"파일 '{os.path.basename(dest)}'가 이미 존재합니다. 덮어쓰시겠습니까?",
                                          QMessageBox.Yes | QMessageBox.No)
            if choice == QMessageBox.No:
                while os.path.exists(dest):
                    dest = os.path.join(selected_model_dir, f"{selected_item}_{i}")
                    i += 1

        # Update the text fields with the final chosen directory name
        self.model_dir_edit.setText(selected_item if os.path.basename(dest) == selected_item else f"{selected_item}_{i-1}")
        self.model_save_edit.setText(dest)

        model_name = self.model_dir_edit.text()
        save_dir = self.model_save_edit.text()
        if not model_name or not save_dir:
            QMessageBox.warning(None, "경고", "모든 필드를 입력해 주세요")
            return

        command = f'python EfficientAD-main/efficientad.py --dataset mvtec_ad --subdataset {selected_item} --output_dir EfficientAD-main/output/{selected_model_dir}'

        def update_progress():
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            while process.poll() is None:
                line = process.stdout.readline()
                print(line)  # Debug output
                if "progress:" in line:
                    try:
                        progress = int(line.split("progress: ")[1].split("%")[0])
                        self.progress_signal.emit(progress)
                    except (IndexError, ValueError):
                        continue

        threading.Thread(target=update_progress).start()

    def update_progress_bar(self, value):
        self.progressBar.setValue(value)

    def set_edit(self):
        selected_item = self.comboBox.currentText()
        selected_dir = os.path.join("../data", selected_item)
        selected_model_dir = os.path.join("../EfficientAD-main/output")
        model_name = selected_item
        self.model_dir_edit.setText(model_name)

        selected_model_save_dir = os.path.join(selected_model_dir, self.model_dir_edit.text())
        self.model_save_edit.setText(selected_model_save_dir)


    def populate_directory_combo(self, combo):
        # './data' 디렉터리에서 디렉터리 명들을 읽어와 콤보박스에 추가합니다.
        directory = "../data"
        directories = [d for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
        combo.addItems(directories)

    # 디렉토리 열기 함수
    def open_directory_dialog(self):
        options = QtWidgets.QFileDialog.Options()
        directory_path = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory", "", options=options)
        if directory_path:
            self.model_save_edit.setText(directory_path)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AnomalyLearnWindow = QtWidgets.QMainWindow()
    ui = Ui_AnomalyLearnWindow()
    ui.setupUi(AnomalyLearnWindow)
    AnomalyLearnWindow.show()
    sys.exit(app.exec_())
